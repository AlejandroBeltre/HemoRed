// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Context;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240622223744_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.tblAddress", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<int>("BuildingNumber")
                        .HasColumnType("int");

                    b.Property<int>("MunicipalityID")
                        .HasColumnType("int");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AddressID");

                    b.HasIndex("MunicipalityID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("backend.Models.tblBloodBag", b =>
                {
                    b.Property<int>("BagID")
                        .HasColumnType("int");

                    b.Property<int>("BloodBankID")
                        .HasColumnType("int");

                    b.Property<int>("BloodTypeID")
                        .HasColumnType("int");

                    b.Property<int>("DonationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BagID", "BloodBankID", "BloodTypeID");

                    b.HasIndex("BloodBankID");

                    b.HasIndex("BloodTypeID");

                    b.HasIndex("DonationID");

                    b.ToTable("BloodBag");
                });

            modelBuilder.Entity("backend.Models.tblBloodBank", b =>
                {
                    b.Property<int>("BloodBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BloodBankID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("AvailableHours")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BloodBankName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BloodBankID");

                    b.HasIndex("AddressID");

                    b.ToTable("BloodBank");
                });

            modelBuilder.Entity("backend.Models.tblBloodType", b =>
                {
                    b.Property<int>("BloodTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BloodTypeID"));

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BloodTypeID");

                    b.ToTable("BloodType");
                });

            modelBuilder.Entity("backend.Models.tblCampaign", b =>
                {
                    b.Property<int>("CampaignID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CampaignID"));

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<int>("OrganizerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CampaignID");

                    b.HasIndex("AddressID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("backend.Models.tblCampaignParticipation", b =>
                {
                    b.Property<int>("CampaignID")
                        .HasColumnType("int");

                    b.Property<int>("OrganizerID")
                        .HasColumnType("int");

                    b.Property<int>("DonationID")
                        .HasColumnType("int");

                    b.HasKey("CampaignID", "OrganizerID");

                    b.HasIndex("DonationID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("CampaignParticipation");
                });

            modelBuilder.Entity("backend.Models.tblDonation", b =>
                {
                    b.Property<int>("DonationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DonationID"));

                    b.Property<int>("BloodBankID")
                        .HasColumnType("int");

                    b.Property<int>("BloodTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DonationTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserDocument")
                        .HasColumnType("longtext");

                    b.Property<string>("UserDocumentNumber")
                        .HasColumnType("varchar(255)");

                    b.HasKey("DonationID");

                    b.HasIndex("BloodBankID");

                    b.HasIndex("BloodTypeID");

                    b.HasIndex("UserDocumentNumber");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("backend.Models.tblEula", b =>
                {
                    b.Property<int>("EulaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("EulaID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EulaID");

                    b.ToTable("Eula");
                });

            modelBuilder.Entity("backend.Models.tblMunicipality", b =>
                {
                    b.Property<int>("MunicipalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MunicipalityID"));

                    b.Property<string>("MunicipalityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ProvinceID")
                        .HasColumnType("int");

                    b.HasKey("MunicipalityID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Municipality");
                });

            modelBuilder.Entity("backend.Models.tblOrganizer", b =>
                {
                    b.Property<int>("OrganizerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("OrganizerID"));

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OrganizerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("OrganizerID");

                    b.HasIndex("AddressID");

                    b.ToTable("Organizer");
                });

            modelBuilder.Entity("backend.Models.tblProvince", b =>
                {
                    b.Property<int>("ProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProvinceID"));

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ProvinceID");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("backend.Models.tblRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<int>("BloodBankID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserDocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.HasIndex("BloodBankID");

                    b.HasIndex("UserDocumentNumber");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("backend.Models.tblUser", b =>
                {
                    b.Property<string>("DocumentNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BloodTypeID")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastDonationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DocumentNumber");

                    b.HasIndex("AddressID");

                    b.HasIndex("BloodTypeID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("backend.Models.tblUserCampaign", b =>
                {
                    b.Property<int>("CampaignID")
                        .HasColumnType("int");

                    b.Property<string>("UserDocument")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserDocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("CampaignID", "UserDocument");

                    b.HasIndex("UserDocumentNumber");

                    b.ToTable("UserCampaign");
                });

            modelBuilder.Entity("backend.Models.tblUserEula", b =>
                {
                    b.Property<int>("EulaID")
                        .HasColumnType("int");

                    b.Property<string>("UserDocument")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("AcceptedStatus")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserDocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("EulaID", "UserDocument");

                    b.HasIndex("UserDocumentNumber");

                    b.ToTable("UserEula");
                });

            modelBuilder.Entity("backend.Models.tblAddress", b =>
                {
                    b.HasOne("backend.Models.tblMunicipality", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblProvince", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Municipality");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("backend.Models.tblBloodBag", b =>
                {
                    b.HasOne("backend.Models.tblBloodBank", "BloodBank")
                        .WithMany()
                        .HasForeignKey("BloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblBloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblDonation", "Donation")
                        .WithMany()
                        .HasForeignKey("DonationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodBank");

                    b.Navigation("BloodType");

                    b.Navigation("Donation");
                });

            modelBuilder.Entity("backend.Models.tblBloodBank", b =>
                {
                    b.HasOne("backend.Models.tblAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("backend.Models.tblCampaign", b =>
                {
                    b.HasOne("backend.Models.tblAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("backend.Models.tblOrganizer", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("backend.Models.tblCampaignParticipation", b =>
                {
                    b.HasOne("backend.Models.tblCampaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblDonation", "Donation")
                        .WithMany()
                        .HasForeignKey("DonationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblOrganizer", "Organizer")
                        .WithMany()
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Donation");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("backend.Models.tblDonation", b =>
                {
                    b.HasOne("backend.Models.tblBloodBank", "BloodBank")
                        .WithMany()
                        .HasForeignKey("BloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblBloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblUser", "User")
                        .WithMany()
                        .HasForeignKey("UserDocumentNumber");

                    b.Navigation("BloodBank");

                    b.Navigation("BloodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.tblMunicipality", b =>
                {
                    b.HasOne("backend.Models.tblProvince", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("backend.Models.tblOrganizer", b =>
                {
                    b.HasOne("backend.Models.tblAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("backend.Models.tblRequest", b =>
                {
                    b.HasOne("backend.Models.tblBloodBank", "BloodBank")
                        .WithMany()
                        .HasForeignKey("BloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblUser", "User")
                        .WithMany()
                        .HasForeignKey("UserDocumentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BloodBank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.tblUser", b =>
                {
                    b.HasOne("backend.Models.tblAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID");

                    b.HasOne("backend.Models.tblBloodType", "BloodType")
                        .WithMany()
                        .HasForeignKey("BloodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("BloodType");
                });

            modelBuilder.Entity("backend.Models.tblUserCampaign", b =>
                {
                    b.HasOne("backend.Models.tblCampaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblUser", "User")
                        .WithMany()
                        .HasForeignKey("UserDocumentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.tblUserEula", b =>
                {
                    b.HasOne("backend.Models.tblEula", "Eula")
                        .WithMany()
                        .HasForeignKey("EulaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblUser", "User")
                        .WithMany()
                        .HasForeignKey("UserDocumentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eula");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
