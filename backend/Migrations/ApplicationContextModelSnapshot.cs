// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Context;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.tblAddress", b =>
                {
                    b.Property<int>("addressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("addressID"));

                    b.Property<int>("buildingNumber")
                        .HasColumnType("int");

                    b.Property<int>("municipalityID")
                        .HasColumnType("int");

                    b.Property<int>("provinceID")
                        .HasColumnType("int");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("addressID");

                    b.HasIndex("municipalityID");

                    b.HasIndex("provinceID");

                    b.ToTable("tblAddress");
                });

            modelBuilder.Entity("backend.Models.tblBloodBag", b =>
                {
                    b.Property<int>("bagID")
                        .HasColumnType("int");

                    b.Property<int>("bloodTypeID")
                        .HasColumnType("int");

                    b.Property<int>("bloodBankID")
                        .HasColumnType("int");

                    b.Property<int>("donationID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("expirationDate")
                        .HasColumnType("date");

                    b.Property<bool>("isReserved")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("bagID", "bloodTypeID", "bloodBankID");

                    b.HasIndex("bloodBankID");

                    b.HasIndex("bloodTypeID");

                    b.HasIndex("donationID");

                    b.ToTable("tblBloodBag");
                });

            modelBuilder.Entity("backend.Models.tblBloodBank", b =>
                {
                    b.Property<int>("bloodBankID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("bloodBankID"));

                    b.Property<int>("addressID")
                        .HasColumnType("int");

                    b.Property<string>("availableHours")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("bloodBankName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("image")
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("bloodBankID");

                    b.HasIndex("addressID");

                    b.ToTable("tblBloodBank");
                });

            modelBuilder.Entity("backend.Models.tblBloodType", b =>
                {
                    b.Property<int>("bloodTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("bloodTypeID"));

                    b.Property<string>("bloodType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("bloodTypeID");

                    b.ToTable("tblBloodType");
                });

            modelBuilder.Entity("backend.Models.tblCampaign", b =>
                {
                    b.Property<int>("campaignID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("campaignID"));

                    b.Property<int?>("addressID")
                        .HasColumnType("int");

                    b.Property<string>("campaignName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("endTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("image")
                        .HasColumnType("longtext");

                    b.Property<int>("organizerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("startTimestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("campaignID");

                    b.HasIndex("addressID");

                    b.HasIndex("organizerID");

                    b.ToTable("tblCampaign");
                });

            modelBuilder.Entity("backend.Models.tblCampaignParticipation", b =>
                {
                    b.Property<int>("campaignID")
                        .HasColumnType("int");

                    b.Property<int>("organizerID")
                        .HasColumnType("int");

                    b.Property<int>("donationID")
                        .HasColumnType("int");

                    b.HasKey("campaignID", "organizerID");

                    b.HasIndex("donationID");

                    b.HasIndex("organizerID");

                    b.ToTable("tblCampaignParticipation");
                });

            modelBuilder.Entity("backend.Models.tblDonation", b =>
                {
                    b.Property<int>("donationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("donationID"));

                    b.Property<int>("bloodBankID")
                        .HasColumnType("int");

                    b.Property<int>("bloodTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("donationTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userDocument")
                        .HasColumnType("varchar(255)");

                    b.HasKey("donationID");

                    b.HasIndex("bloodBankID");

                    b.HasIndex("bloodTypeID");

                    b.HasIndex("userDocument");

                    b.ToTable("tblDonation");
                });

            modelBuilder.Entity("backend.Models.tblEula", b =>
                {
                    b.Property<int>("eulaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("eulaID"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("updateDate")
                        .HasColumnType("date");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("eulaID");

                    b.ToTable("tblEula");
                });

            modelBuilder.Entity("backend.Models.tblMunicipality", b =>
                {
                    b.Property<int>("municipalityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("municipalityID"));

                    b.Property<string>("municipalityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("provinceID")
                        .HasColumnType("int");

                    b.HasKey("municipalityID");

                    b.HasIndex("provinceID");

                    b.ToTable("tblMunicipality");
                });

            modelBuilder.Entity("backend.Models.tblOrganizer", b =>
                {
                    b.Property<int>("organizerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("organizerID"));

                    b.Property<int?>("addressID")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("organizerName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("organizerID");

                    b.HasIndex("addressID");

                    b.ToTable("tblOrganizer");
                });

            modelBuilder.Entity("backend.Models.tblProvince", b =>
                {
                    b.Property<int>("provinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("provinceID"));

                    b.Property<string>("provinceName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("provinceID");

                    b.ToTable("tblProvince");
                });

            modelBuilder.Entity("backend.Models.tblRequest", b =>
                {
                    b.Property<int>("requestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("requestID"));

                    b.Property<int>("bloodTypeID")
                        .HasColumnType("int");

                    b.Property<string>("requestReason")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("requestTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("requestedAmount")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("userDocument")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("requestID");

                    b.HasIndex("bloodTypeID");

                    b.HasIndex("userDocument");

                    b.ToTable("tblRequest");
                });

            modelBuilder.Entity("backend.Models.tblUser", b =>
                {
                    b.Property<string>("documentNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("addressID")
                        .HasColumnType("int");

                    b.Property<DateOnly>("birthDate")
                        .HasColumnType("date");

                    b.Property<int>("bloodTypeID")
                        .HasColumnType("int");

                    b.Property<string>("documentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("image")
                        .HasColumnType("longtext");

                    b.Property<DateOnly?>("lastDonationDate")
                        .HasColumnType("date");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("phone")
                        .HasColumnType("longtext");

                    b.Property<string>("userRole")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("documentNumber");

                    b.HasIndex("addressID");

                    b.HasIndex("bloodTypeID");

                    b.ToTable("tblUser");
                });

            modelBuilder.Entity("backend.Models.tblUserCampaign", b =>
                {
                    b.Property<int>("campaignID")
                        .HasColumnType("int");

                    b.Property<string>("userDocument")
                        .HasColumnType("varchar(255)");

                    b.HasKey("campaignID", "userDocument");

                    b.HasIndex("userDocument");

                    b.ToTable("tblUserCampaign");
                });

            modelBuilder.Entity("backend.Models.tblUserEula", b =>
                {
                    b.Property<int>("eulaID")
                        .HasColumnType("int");

                    b.Property<string>("userDocument")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("acceptedStatus")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("eulaID", "userDocument");

                    b.HasIndex("userDocument");

                    b.ToTable("tblUserEula");
                });

            modelBuilder.Entity("backend.Models.tblAddress", b =>
                {
                    b.HasOne("backend.Models.tblMunicipality", "tblMunicipality")
                        .WithMany()
                        .HasForeignKey("municipalityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblProvince", "tblProvince")
                        .WithMany()
                        .HasForeignKey("provinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblMunicipality");

                    b.Navigation("tblProvince");
                });

            modelBuilder.Entity("backend.Models.tblBloodBag", b =>
                {
                    b.HasOne("backend.Models.tblBloodBank", "tblBloodBank")
                        .WithMany()
                        .HasForeignKey("bloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblBloodType", "tblBloodType")
                        .WithMany()
                        .HasForeignKey("bloodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblDonation", "tblDonation")
                        .WithMany()
                        .HasForeignKey("donationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblBloodBank");

                    b.Navigation("tblBloodType");

                    b.Navigation("tblDonation");
                });

            modelBuilder.Entity("backend.Models.tblBloodBank", b =>
                {
                    b.HasOne("backend.Models.tblAddress", "tblAddress")
                        .WithMany()
                        .HasForeignKey("addressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblAddress");
                });

            modelBuilder.Entity("backend.Models.tblCampaign", b =>
                {
                    b.HasOne("backend.Models.tblAddress", "tblAddress")
                        .WithMany()
                        .HasForeignKey("addressID");

                    b.HasOne("backend.Models.tblOrganizer", "tblOrganizer")
                        .WithMany()
                        .HasForeignKey("organizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblAddress");

                    b.Navigation("tblOrganizer");
                });

            modelBuilder.Entity("backend.Models.tblCampaignParticipation", b =>
                {
                    b.HasOne("backend.Models.tblCampaign", "tblCampaign")
                        .WithMany()
                        .HasForeignKey("campaignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblDonation", "tblDonation")
                        .WithMany()
                        .HasForeignKey("donationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblOrganizer", "tblOrganizer")
                        .WithMany()
                        .HasForeignKey("organizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblCampaign");

                    b.Navigation("tblDonation");

                    b.Navigation("tblOrganizer");
                });

            modelBuilder.Entity("backend.Models.tblDonation", b =>
                {
                    b.HasOne("backend.Models.tblBloodBank", "tblBloodBank")
                        .WithMany()
                        .HasForeignKey("bloodBankID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblBloodType", "tblBloodType")
                        .WithMany()
                        .HasForeignKey("bloodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblUser", "tblUser")
                        .WithMany()
                        .HasForeignKey("userDocument");

                    b.Navigation("tblBloodBank");

                    b.Navigation("tblBloodType");

                    b.Navigation("tblUser");
                });

            modelBuilder.Entity("backend.Models.tblMunicipality", b =>
                {
                    b.HasOne("backend.Models.tblProvince", "tblProvince")
                        .WithMany()
                        .HasForeignKey("provinceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblProvince");
                });

            modelBuilder.Entity("backend.Models.tblOrganizer", b =>
                {
                    b.HasOne("backend.Models.tblAddress", "address")
                        .WithMany()
                        .HasForeignKey("addressID");

                    b.Navigation("address");
                });

            modelBuilder.Entity("backend.Models.tblRequest", b =>
                {
                    b.HasOne("backend.Models.tblBloodBank", "tblBloodBank")
                        .WithMany()
                        .HasForeignKey("bloodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblUser", "tblUser")
                        .WithMany()
                        .HasForeignKey("userDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblBloodBank");

                    b.Navigation("tblUser");
                });

            modelBuilder.Entity("backend.Models.tblUser", b =>
                {
                    b.HasOne("backend.Models.tblAddress", "tblAddress")
                        .WithMany()
                        .HasForeignKey("addressID");

                    b.HasOne("backend.Models.tblBloodType", "tblBloodType")
                        .WithMany()
                        .HasForeignKey("bloodTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblAddress");

                    b.Navigation("tblBloodType");
                });

            modelBuilder.Entity("backend.Models.tblUserCampaign", b =>
                {
                    b.HasOne("backend.Models.tblCampaign", "tblCampaign")
                        .WithMany()
                        .HasForeignKey("campaignID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblUser", "tblUser")
                        .WithMany()
                        .HasForeignKey("userDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblCampaign");

                    b.Navigation("tblUser");
                });

            modelBuilder.Entity("backend.Models.tblUserEula", b =>
                {
                    b.HasOne("backend.Models.tblEula", "tblEula")
                        .WithMany()
                        .HasForeignKey("eulaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.tblUser", "tblUser")
                        .WithMany()
                        .HasForeignKey("userDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tblEula");

                    b.Navigation("tblUser");
                });
#pragma warning restore 612, 618
        }
    }
}
